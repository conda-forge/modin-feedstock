{% set version = "0.11.1" %}

package:
  name: modin-packages
  version: {{ version }}

source:
  url: https://github.com/modin-project/modin/archive/refs/tags/{{ version }}.tar.gz
  sha256: 29c059cb22a1f72d8f86ad9e4bd1588fedbf85d7d8d8d44161cc416b1a8d4489
  patches:
    # Remove all requirements from setup.py - they should be handled here.
    # The point is to create a "patch failed" conflict when dependencies change
    # in upstream so this doesn't go unnoticed.
    - patches/0001-Remove-all-dependencies-from-setup.py.patch

build:
  number: 0
  # noarch disabled because the recipe now has selector for Ray, see below
  # noarch: python
  skip: true  # [py<37]

# the outputs map the modin options on PyPI (see upstream definition
# https://github.com/modin-project/modin/blob/0.10.1/setup.py#L40-L45)
# from "modin[<option>]" to "modin-<option>" as a conda-forge package
outputs:
  - name: modin-all
    requirements:
      host:
        - python
      run:
        - python
        - {{ pin_subpackage('modin-core', exact=True) }}
        - {{ pin_subpackage('modin-dask', exact=True) }}
        # ray does not have OSX builds yet
        - {{ pin_subpackage('modin-ray', exact=True) }}           # [not osx]
        # Note: modin-omnisci is conda-only, its dependencies were never published on PyPI
        - {{ pin_subpackage('modin-omnisci', exact=True) }}       # [linux]
        #- {{ pin_subpackage('modin-remote', exact=True) }}       # turned off for now, see below
        #- {{ pin_subpackage('modin-spreadsheet', exact=True) }}  # turned off for now, see below
        #- {{ pin_subpackage('modin-sql', exact=True) }}          # turned off for now, see below
    test:
      imports:
        # dummy test; actual tests are in subpackages
        - modin

  # compatibility with packagename before split into options
  - name: modin
    requirements:
      host:
        - python
      run:
        - python
        # modin needs at least one engine; use dask as it is more light-weight than ray
        - {{ pin_subpackage('modin-dask', exact=True) }}
    test:
      imports:
        - modin
        - modin.pandas

  - name: modin-core
    build:
      script: python -m pip install . --no-deps --ignore-installed -vv
    requirements:
      host:
        - pip
        - python
      run:
        - python
        - packaging
        - pandas ==1.3.3
        - numpy >=1.16.5
      run_constrained:
        # DEBUG for conda/conda#10975
        - openssl =1.1.1  # [py37]
    test:
      imports:
        - modin
        - modin.pandas

  - name: modin-dask
    build:
    requirements:
      host:
        - python
      run:
        - python
        - {{ pin_subpackage('modin-core', exact=True) }}
        - dask >=2.22.0
        - distributed >=2.22.0
    test:
      imports:
        - modin
        - modin.pandas
      commands:
        - python -c "import modin.pandas as pd, modin.config as cfg; cfg.Engine.put('Dask'); df = pd.DataFrame([])"

  - name: modin-ray
    build:
      # there is no Ray in conda-forge for MacOS yet, see conda-forge/ray-packages-feedstock#2
      skip: true  # [osx]
    requirements:
      host:
        - python
      run:
        - python
        - {{ pin_subpackage('modin-core', exact=True) }}
        - ray-core >=1.4.0
        # aioredis 2.x breaks Ray
        # ref: https://github.com/conda-forge/ray-packages-feedstock/issues/38
        - aioredis <2
        - pyarrow >=1.0
    test:
      imports:
        - modin
        - modin.pandas
      commands:
        - python -c "import modin.pandas as pd, modin.config as cfg; cfg.Engine.put('Ray'); df = pd.DataFrame([])"

  - name: modin-omnisci
    build:
      # there is no OmniSci on anything but Linux for now
      skip: true  # [not linux]
    requirements:
      host:
        - python
      run:
        - python
        - {{ pin_subpackage('modin-core', exact=True) }}
        - pyarrow >=3.0
        - pyomniscidbe
    test:
      imports:
        - modin
        - modin.pandas
      commands:
        - python -c "import modin.experimental.pandas as pd, modin.config as cfg; cfg.Engine.put('Native'); cfg.Backend.put('OmniSci'); df = pd.DataFrame([])"

  - name: modin-sql
    build:
      # Dependencies dfsql, mindsdb_sql are not in conda-forge yet.
      skip: true
    requirements:
      host:
        - python
      run:
        - python
        - {{ pin_subpackage('modin-core', exact=True) }}
        - dfsql >=0.4.2
    test:
      imports:
        # are there more specific imports?!
        - modin

  - name: modin-remote
    build:
      # Dependency rpyc is not in conda-forge yet.
      # Also requires ray-autoscaler which is now absent because
      # its dependencies on conda-forge are too ancient.
      skip: true
    requirements:
      host:
        - python
      run:
        - python
        - {{ pin_subpackage('modin-core', exact=True) }}
        - boto3
        - cloudpickle
        - rpyc ==4.1.5
    test:
      imports:
        # are there more specific imports?!
        - modin

  # TODO: bring https://pypi.org/project/modin-spreadsheet/ to conda-forge
  # as modin-spreadsheet-core, leave modin-spreadsheet to be a subpackage here;
  # see discussion with upstream developers here:
  # https://github.com/conda-forge/modin-feedstock/pull/14/files#r595534632
  - name: modin-spreadsheet
    build:
      # dependency modin-spreadsheet-core is not in conda-forge yet
      skip: true
    requirements:
      host:
        - python
      run:
        - python
        - {{ pin_subpackage('modin-core', exact=True) }}
        - modin-spreadsheet >=0.1.0
    test:
      imports:
        # are there more specific imports?!
        - modin

about:
  home: https://github.com/modin-project/modin
  license: Apache-2.0
  license_family: Apache
  license_file: LICENSE
  summary: Speed up your Pandas workflows by changing a single line of code
  doc_url: https://modin.readthedocs.io/
  dev_url: https://github.com/modin-project/modin

extra:
  recipe-maintainers:
    - devin-petersohn
    - h-vetinari
    - vnlitvinov
    - maksimbo1
  feedstock-name: modin
